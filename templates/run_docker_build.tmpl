#!/usr/bin/env bash

# NOTE: This script has been automatically generated by github.com/conda-forge/conda-smithy/...

RECIPE_ROOT=$(cd "$(dirname "$0")/.."; pwd;)
echo $RECIPE_ROOT

UPLOAD_OWNER="conda-forge"
UPLOAD_CHANNEL="main"

while getopts :u:c: OPT; do
    case "$OPT" in
      u)
        UPLOAD_OWNER="${OPTARG}" ;;
      c)
        UPLOAD_CHANNEL="{$OPTARG}" ;;
      [?])
        # got invalid option
        echo "Usage: $0 [-u upload-owner] [-c upload-channel]" >&2
        exit 1 ;;
    esac
done


echo ${UPLOAD_OWNER}

config=$(cat <<CONDARC

channels:
 - conda-forge
 - file:///conda_build_dir
 - defaults # As we need conda-build

conda-build:
 root-dir: /conda_build_dir

show_channel_urls: True

CONDARC)

cat << EOF | docker run -i \
                        -v ${RECIPE_ROOT}:/recipe_root \
                        -v ${RECIPE_ROOT}/build_artefacts:/conda_build_dir \
                        -a stdin -a stdout -a stderr \
                        {{ docker.image }} \
                        {{ docker.command }} || exit $?

export PYTHONUNBUFFERED=1
echo "$config" > ~/.condarc
# A lock sometimes occurs with incomplete builds. The lock file is stored in build_artefacts.
conda clean --lock

conda info
{%if build_setup %}
{{ build_setup }}{% endif %}

{% block build -%}conda build --no-test /recipe_root || exit 1

{% endblock -%}

EOF


# In a separate docker, run the test...
cat << EOF | docker run -i \
                        -v ${RECIPE_ROOT}:/recipe_root \
                        -v ${RECIPE_ROOT}/build_artefacts:/conda_build_dir \
                        -a stdin -a stdout -a stderr \
                        {{ docker.image }} \
                        {{ docker.command }} || exit $?

export BINSTAR_TOKEN=${BINSTAR_TOKEN}
export PYTHONUNBUFFERED=1
echo "$config" > ~/.condarc

conda info
{% if test_setup -%}
{{ test_setup }}{%- endif %}
{% block test_and_upload %}
conda build --test /recipe_root || exit 1
/recipe_root/ci_support/upload_or_check_non_existence.py /recipe_root $UPLOAD_OWNER --channel=$UPLOAD_CHANNEL || exit 1
{% endblock %}

EOF
