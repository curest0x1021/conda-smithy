#!/usr/bin/env bash

# PLEASE NOTE: This script has been automatically generated by conda-smithy. Any changes here
# will be lost next time ``conda smithy rerender`` is run. If you would like to make permanent
# changes to this script, consider a proposal to conda-smithy so that other feedstocks can also
# benefit from the improvement.

set -e

FEEDSTOCK_ROOT=$(cd "$(dirname "$0")/.."; pwd;)
RECIPE_ROOT=$FEEDSTOCK_ROOT/{{ recipe_dir }}

docker info

config=$(cat <<CONDARC

channels:
{%- for channel in channels.get('sources', []) %}
 - {{ channel }}
{%- endfor %}

conda-build:
 root-dir: /home/conda/feedstock_root/build_artifacts

show_channel_urls: true

CONDARC
)


# In order for the conda-build process in the container to write to the mounted
# volumes, we need to run with the same id as the host machine, which is
# normally the owner of the mounted volumes, or at least has write permission
HOST_USER_ID=$(id -u)
# Check if docker-machine is being used (normally on OSX) and get the uid from
# the VM
if hash docker-machine 2> /dev/null && docker-machine active > /dev/null; then
    HOST_USER_ID=$(docker-machine ssh $(docker-machine active) id -u)
fi

rm -f "$FEEDSTOCK_ROOT/build_artifacts/conda-forge-build-done"

ARTFACTS="$FEEDSTOCK_ROOT/build_artifacts"

test -d "$ARTIFACTS" || mkdir "$ARTIFACTS"
DONE_CANARY="$ARTIFACTS/conda-forge-build-done"
rm -f "$DONE_CANARY"

cat << EOF > "$FEEDSTOCK_ROOT/ci_support/build.sh"

set -e
export PYTHONUNBUFFERED=1

echo "$config" > ~/.condarc
# A lock sometimes occurs with incomplete builds. The lock file is stored in build_artifacts.
conda clean --lock

conda install --yes --quiet conda-forge-ci-setup=1
{% if build_setup -%}
{{ build_setup }}{% endif -%}

{%- block build %}
conda build /home/conda/recipe_root -m /home/conda/feedstock_root/.ci_support/${CONFIG}.yaml --quiet

touch /home/conda/feedstock_root/build_artifacts/conda-forge-build-done
EOF

# Create and run the container in two comamnds,
# so we have a handle on the container ID
VOLUMES="-v "${RECIPE_ROOT}":/home/conda/recipe_root \
         -v "${FEEDSTOCK_ROOT}":/home/conda/feedstock_root"

CONTAINER=$(docker create -t \
           $VOLUMES \
           -e HOST_USER_ID="${HOST_USER_ID}" \
           {{ matrix_env_vars(matrix) }} \
           {{ docker.image }} \
           {{ docker.command }} \
           /home/conda/feedstock_root/ci_support/build.sh || exit $?)

# build
docker start -i $CONTAINER
test -f "$DONE_CANARY"
rm -f "$DONE_CANARY"

# commit, so we can run upload in the same environment
IMAGE=$(docker commit $CONTAINER)

# upload with the token passed through stdin
# FIXME: Should this run if there is no token?
cat << EOF | docker run --rm -i \
    $VOLUMES \
    $IMAGE \
    {{ docker.command }} || exit $?
set -e
export BINSTAR_TOKEN=${BINSTAR_TOKEN}

{%- block test_and_upload %}
{%- for owner, channel in channels['targets'] %}
{{ upload_script }} /home/conda/recipe_root {{ owner }} --channel={{ channel }} -m /home/conda/feedstock_root/.ci_support/${CONFIG}.yaml || exit 1
{%- endfor -%}
{%- endblock %}

# check that the end of the script was reached
touch /home/conda/feedstock_root/build_artifacts/conda-forge-build-done
EOF

test -f "$DONE_CANARY"
# everything succeeded, remove our container and image
docker rm -f "$CONTAINER"
docker rmi "$IMAGE"

echo "done"
